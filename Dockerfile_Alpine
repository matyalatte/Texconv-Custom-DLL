# Building workflow for Alpine Linux.
#
# 1. Use this docker file to build the executable.
#    docker build -t texconv -f Dockerfile_Alpine ./
#
# 2. Run the built image.
#    docker run texconv
#
# 3. Use "docker cp" to get the built executables.
#    docker cp <CONTAINER ID>:/Texconv-Custom-DLL/texconv ./
#    docker cp <CONTAINER ID>:/Texconv-Custom-DLL/texassemble ./
#
# 4. Also, you can get the built shared library.
#    docker cp <CONTAINER ID>:/Texconv-Custom-DLL/libtexconv.so ./
#
# Notes:
#   -You can add JPEG and PNG support with build-arg
#    docker build --build-arg JPGPNG=true -t texconv -f Dockerfile_Alpine ./

# Base image
FROM matyalatte/alpine3.16-cmake3.25:latest

# Add JPEG and PNG support when true
ARG JPGPNG=false

# Install packages
RUN apk update && \
    apk add --no-cache musl-dev gcc make g++ file alpine-sdk wget bash && \
    if [ "$JPGPNG" = "true" ]; then \
        apk add --no-cache libjpeg-turbo-dev libpng-dev; \
    fi

# Clone repo
COPY . /Texconv-Custom-DLL
WORKDIR /Texconv-Custom-DLL
RUN git submodule update --init --recursive --recommend-shallow --depth 1

# Build
WORKDIR /Texconv-Custom-DLL/shell_scripts
RUN if [ "$JPGPNG" = "true" ]; then \
        ./build_with_jpg_png.sh && \
        ./build_as_exe_with_jpg_png.sh; \
    else \
        ./build.sh && \
        ./build_as_exe.sh; \
    fi
